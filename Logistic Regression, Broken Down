{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dfe9ccfa",
   "metadata": {
    "papermill": {
     "duration": 0.004949,
     "end_time": "2024-12-28T23:30:48.327187",
     "exception": false,
     "start_time": "2024-12-28T23:30:48.322238",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Logistic Regression, Inside Out\n",
    "  \n",
    "This notebook is meant to provide a clear explaination as to the intuition behind Logistic Regression, where it is used, and how to use it.\n",
    "This notebook will use the example of classifying student grades using this dataset: https://www.kaggle.com/datasets/rabieelkharoua/students-performance-dataset, Alterations have been made for binary classification.\n",
    "\n",
    "### Background Knowledge Assumptions\n",
    "This notebook assumes you are already familiar with what classification and linear regression are as well as some basic knowledge of statistics and probability.\n",
    "\n",
    "### Contents\n",
    "1. [\"When to Use\"](#chapter1)\n",
    "2. [\"The Algorithm Broken Down\"](#chapter2)\n",
    "3. [\"The Algorithm In Use\"](#chapter3)\n",
    "4. [\"Limiations and Refinements\"](#chapter4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02cdbe9b",
   "metadata": {
    "papermill": {
     "duration": 0.003595,
     "end_time": "2024-12-28T23:30:48.335064",
     "exception": false,
     "start_time": "2024-12-28T23:30:48.331469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. When to Use <a class = \"anchor\" id = \"chapter1\"></a>\n",
    "|Advantages | Disadvantages |\n",
    "| --- | --- |\n",
    "| Simple to Implement | Might lack performance compared to more complicated Models |\n",
    "| High Interpretability | Assumes Linearity between Features and Log Odds (logits) |\n",
    "| Good Baseline for other Models | Assumes Features Independent of Each Other |\n",
    "| | Assumes Low Multicolinearity Between Features | \n",
    "\n",
    "In the simplist case, Logistic Regression takes in various features as inputs and returns the probability of one of two categories given the features. This makes Logistic Regression a simple and intuitive approach to classification tasks.\n",
    "  \n",
    "Consider the Example:\n",
    "Let's say we want to figure out whether a student is likely to pass highschool based on the time they spent studying. Intuitively we would want to find their probability of passing given their time spent studying. Thus, for every observation we are trying to find the following:\n",
    "$$P(Pass | Studytime)$$\n",
    "More generally this would be:\n",
    "$$P(Y | X)$$\n",
    "Where Y is the class or label for the outcome and X is the observed feature value.\n",
    "#### MOVE THIS PART LATER\n",
    "The last example only considers the univariate and binary case (one independent variable and dependent variable that is only yes or no). However, many real world problems require considering multiple variables and many different potential cases for the dependent variable. Once again logistic regression can be used for such a task.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f58bf24",
   "metadata": {
    "papermill": {
     "duration": 0.00356,
     "end_time": "2024-12-28T23:30:48.342570",
     "exception": false,
     "start_time": "2024-12-28T23:30:48.339010",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. The Algorithm Broken Down <a class = \"anchor\" id = \"chapter2\"></a>  \n",
    "### Predictions\n",
    "Logistic Regression seeks to answer the question of which possible case is most likely given the provided data. Following our example of students passing highschool based on their study time, a logistic regression model will be answering is it more likely for the student to pass or for the student to fail given their study time. This is done by finding the probability of a given output label (in this case pass or not pass) given by:\n",
    "$$P(Pass) = \\frac{e^{\\beta_0 + \\beta_1 * Studytime}}{1 + e^{\\beta_0 + \\beta_1 * Studytime}}$$\n",
    "In a more general form this will be:\n",
    "$$P(Y) = \\frac{e^{\\beta_0 + \\beta_1 * X}}{1 + e^{\\beta_0 + \\beta_1 * X}}$$\n",
    "Where Y is a binary variable that is one of 2 classes and X is some independent variable.\n",
    "\n",
    "### Optimization\n",
    "Notice how in calculating the probabilities, the formula $\\beta_0 + \\beta_1 * X$ is used. This is the same formula used in linear regression, however in this case, there is not a linear relationship between the output of the model and the inputs to the model. But for simplicity in the calculation and interpretation of the coefficients in this model, log odds or logits are used given by:\n",
    "\n",
    "$$ln(\\frac{P(Y)}{1 - P(Y)}) = \\beta_0 + \\beta_1 * X$$\n",
    "With the same assumptions for X and Y as above.\n",
    "\n",
    "Continuing with the example of student performance the log odds will be:\n",
    "$$ln(\\frac{P(Pass)}{1 - P(Pass)}) = \\beta_0 + \\beta_1 * Studytime$$\n",
    "for the predicted log odds of passing and\n",
    "$$ln(\\frac{P(Not Pass)}{1 - P(Not Pass)}) = \\beta_0 + \\beta_1 * Studytime$$\n",
    "for the predicted log odds of not passing.\n",
    "\n",
    "In Logistic Regression, log odds are use in *optimizing* the model rather than absolute probabilities as it provides a simple relationship between the relationship between the independent variables and the dependent variables. In this case, optimization means finding the values for $\\beta_0$ and $\\beta_1$ that most accurately reflects the nature of the observations. The actual interpretation of the relationship between the log odds and the coefficients can be as follows: a one unit increase in X on average is related to a $\\beta_1$ % increase in the odds of Y when the change is small (ie. ln(5.2) - ln(5) = 0.03922 $\\approx$ (5.2 - 5) / 5). When the change is larger, this interpretation falls apart as the difference in ln values is no longer as close to the actual changes, instead $e^{\\beta_1}$ becomes the actual % change of the odds.\n",
    "\n",
    "Building off of the log odds, the method of maximum likelihood is used to estimate the actual coefficients for $\\beta_0$ and $\\beta_1$. Intuitively, the method of maximum likelihoods fits parameters $\\beta_1$ and $\\beta_0$ such that the observed observations are most likely. Essentially in mathematical terms this means that we are maximizing the functions:\n",
    "$$\\Pi_{i=1}^{n}p(x_i)$$\n",
    "$$\\Pi_{i=1}^{n}(1 - p(x_i))$$\n",
    "For labels that are positive (1) and labels that are negative (0) respectively. Combining both into a single function we get:\n",
    "$$\n",
    "\\begin{align*}\n",
    "L(\\beta_0, \\beta_1) &= \\Pi_{i=1}^{n}p(x_i) * \\Pi_{i=1}^{n}(1 - p(x_i)) \\\\\n",
    "                    &= \\Pi_{i=1}^{n}(p(x_i)^{y_i} * (1 - p(x_i))^{1 - y_i})\n",
    "\\end{align*}    \n",
    "$$\n",
    "Where $n$ is the number of observations in our data, $x_i$ is the feature(s) and $y_i$ is the label of the observation i, $y_i$ is 1 when the label is positive and 0 otherwise. If you want to look more into the math behind maximum likelihood and specifically maximum likelihood for logistic regression, I recommend this post: https://arunaddagatla.medium.com/maximum-likelihood-estimation-in-logistic-regression-f86ff1627b67"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd87b0c",
   "metadata": {
    "papermill": {
     "duration": 0.003459,
     "end_time": "2024-12-28T23:30:48.349782",
     "exception": false,
     "start_time": "2024-12-28T23:30:48.346323",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Implementation <a class = \"anchor\" id = \"chapter3\"></a>  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc189642",
   "metadata": {
    "papermill": {
     "duration": 0.003426,
     "end_time": "2024-12-28T23:30:48.356975",
     "exception": false,
     "start_time": "2024-12-28T23:30:48.353549",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Implementation in Scikitlearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95d29548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:48.365836Z",
     "iopub.status.busy": "2024-12-28T23:30:48.365450Z",
     "iopub.status.idle": "2024-12-28T23:30:50.558491Z",
     "shell.execute_reply": "2024-12-28T23:30:50.557151Z"
    },
    "papermill": {
     "duration": 2.200153,
     "end_time": "2024-12-28T23:30:50.560744",
     "exception": false,
     "start_time": "2024-12-28T23:30:48.360591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# imports\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "634b9e3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.570462Z",
     "iopub.status.busy": "2024-12-28T23:30:50.569854Z",
     "iopub.status.idle": "2024-12-28T23:30:50.623580Z",
     "shell.execute_reply": "2024-12-28T23:30:50.622184Z"
    },
    "papermill": {
     "duration": 0.061139,
     "end_time": "2024-12-28T23:30:50.626056",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.564917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>StudentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "      <th>GPA</th>\n",
       "      <th>GradeClass</th>\n",
       "      <th>Pass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1001</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>19.833723</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.929196</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1002</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>15.408756</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.042915</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1003</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4.210570</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.112602</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1004</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>10.028829</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.054218</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1005</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4.672495</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.288061</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  StudentID  Age  Gender  Ethnicity  ParentalEducation  \\\n",
       "0           0       1001   17       1          0                  2   \n",
       "1           1       1002   18       0          0                  1   \n",
       "2           2       1003   15       0          2                  3   \n",
       "3           3       1004   17       1          0                  3   \n",
       "4           4       1005   17       1          0                  2   \n",
       "\n",
       "   StudyTimeWeekly  Absences  Tutoring  ParentalSupport  Extracurricular  \\\n",
       "0        19.833723         7         1                2                0   \n",
       "1        15.408756         0         0                1                0   \n",
       "2         4.210570        26         0                2                0   \n",
       "3        10.028829        14         0                3                1   \n",
       "4         4.672495        17         1                3                0   \n",
       "\n",
       "   Sports  Music  Volunteering       GPA  GradeClass  Pass  \n",
       "0       0      1             0  2.929196         2.0     1  \n",
       "1       0      0             0  3.042915         1.0     1  \n",
       "2       0      0             0  0.112602         4.0     0  \n",
       "3       0      0             0  2.054218         3.0     1  \n",
       "4       0      0             0  1.288061         4.0     0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading data\n",
    "df = pd.read_csv(\"/kaggle/input/altered-student-performance/Altered_Student_Performance_data.csv\")\n",
    "df.head() # only going to care about the columns \"StudyTimeWeekly\" and \"Pass\" for now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c63e0d91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.636546Z",
     "iopub.status.busy": "2024-12-28T23:30:50.636101Z",
     "iopub.status.idle": "2024-12-28T23:30:50.653062Z",
     "shell.execute_reply": "2024-12-28T23:30:50.651798Z"
    },
    "papermill": {
     "duration": 0.024669,
     "end_time": "2024-12-28T23:30:50.655387",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.630718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# splitting data\n",
    "X_train, X_test, y_train, y_test = train_test_split(df[[\"StudyTimeWeekly\"]], df[\"Pass\"], test_size=0.3, random_state=37)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9b64960f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.665818Z",
     "iopub.status.busy": "2024-12-28T23:30:50.665311Z",
     "iopub.status.idle": "2024-12-28T23:30:50.697461Z",
     "shell.execute_reply": "2024-12-28T23:30:50.695964Z"
    },
    "papermill": {
     "duration": 0.039485,
     "end_time": "2024-12-28T23:30:50.699345",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.659860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating and training model\n",
    "model = LogisticRegression()\n",
    "\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ae4356f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.709896Z",
     "iopub.status.busy": "2024-12-28T23:30:50.709392Z",
     "iopub.status.idle": "2024-12-28T23:30:50.720062Z",
     "shell.execute_reply": "2024-12-28T23:30:50.718375Z"
    },
    "papermill": {
     "duration": 0.01869,
     "end_time": "2024-12-28T23:30:50.722462",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.703772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5376044568245125\n"
     ]
    }
   ],
   "source": [
    "# predicting\n",
    "accuracy = model.score(X_test, y_test)\n",
    "print(accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d223a773",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.734751Z",
     "iopub.status.busy": "2024-12-28T23:30:50.734273Z",
     "iopub.status.idle": "2024-12-28T23:30:50.747948Z",
     "shell.execute_reply": "2024-12-28T23:30:50.746683Z"
    },
    "papermill": {
     "duration": 0.021456,
     "end_time": "2024-12-28T23:30:50.749715",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.728259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StudyHours</th>\n",
       "      <th>Predictions</th>\n",
       "      <th>Actual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1366</th>\n",
       "      <td>16.085223</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>5.125848</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2085</th>\n",
       "      <td>10.138602</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1826</th>\n",
       "      <td>14.498205</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1779</th>\n",
       "      <td>6.453674</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      StudyHours  Predictions  Actual\n",
       "1366   16.085223            1       1\n",
       "84      5.125848            0       1\n",
       "2085   10.138602            1       0\n",
       "1826   14.498205            1       0\n",
       "1779    6.453674            0       0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# looking at predictions\n",
    "predictions = model.predict(X_test)\n",
    "predictions = pd.DataFrame({\"StudyHours\": X_test[\"StudyTimeWeekly\"], \"Predictions\":predictions, \"Actual\": y_test})\n",
    "predictions.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b9272ec2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.760608Z",
     "iopub.status.busy": "2024-12-28T23:30:50.760117Z",
     "iopub.status.idle": "2024-12-28T23:30:50.765329Z",
     "shell.execute_reply": "2024-12-28T23:30:50.764111Z"
    },
    "papermill": {
     "duration": 0.013263,
     "end_time": "2024-12-28T23:30:50.767644",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.754381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# imports for visualization\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "29e25a91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.779782Z",
     "iopub.status.busy": "2024-12-28T23:30:50.779310Z",
     "iopub.status.idle": "2024-12-28T23:30:50.785665Z",
     "shell.execute_reply": "2024-12-28T23:30:50.784275Z"
    },
    "papermill": {
     "duration": 0.014341,
     "end_time": "2024-12-28T23:30:50.787531",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.773190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Beta1 Coefficient: 0.04570837512652257\n",
      "intercept: -0.4459422574581454\n"
     ]
    }
   ],
   "source": [
    "print(f\"Beta1 Coefficient: {model.coef_[0][0]}\")\n",
    "print(f\"intercept: {model.intercept_[0]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "05ad84a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-28T23:30:50.799160Z",
     "iopub.status.busy": "2024-12-28T23:30:50.798750Z",
     "iopub.status.idle": "2024-12-28T23:30:51.196281Z",
     "shell.execute_reply": "2024-12-28T23:30:51.195011Z"
    },
    "papermill": {
     "duration": 0.405527,
     "end_time": "2024-12-28T23:30:51.198093",
     "exception": false,
     "start_time": "2024-12-28T23:30:50.792566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualizing decision boundary\n",
    "beta = model.coef_[0]\n",
    "intercept = model.intercept_[0]\n",
    "\n",
    "x_vals = np.linspace(X_train[\"StudyTimeWeekly\"].min()-100, X_train[\"StudyTimeWeekly\"].max()+100, 100)\n",
    "probabilities =  np.exp(intercept + beta * x_vals) / (1 + np.exp(intercept + beta * x_vals))\n",
    "\n",
    "plt.plot(x_vals, probabilities, color=\"black\", label=\"Decision Boundary\", zorder=2)\n",
    "plt.grid(zorder=1)\n",
    "plt.xlabel(\"Study Time\")\n",
    "plt.ylabel(\"Estimated Probability of Passing\")\n",
    "plt.title(\"Line of best fit for Logistic Regression\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44c21221",
   "metadata": {
    "papermill": {
     "duration": 0.005238,
     "end_time": "2024-12-28T23:30:51.209188",
     "exception": false,
     "start_time": "2024-12-28T23:30:51.203950",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Interpreting Results\n",
    "From our simple model of logistic regression using just the amount of time students spend studying on whether or not they pass high school, we find regression coefficients of -0.4459 for the intercept ($\\beta_0$) and 0.0457 for the coefficient on studytimeweekly ($\\beta_1$). There isn't an interpretation for the intercept. The $\\beta_1$ coefficient is interpreted as: on average a 1 hour increase in weekly study time increases the student's odds of passing high school by $e^{0.0457} - 1$%. However, it should also be noted that the model is not very accurate, having only achieved an accuracy of 53.76%."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c3f3088",
   "metadata": {
    "papermill": {
     "duration": 0.005347,
     "end_time": "2024-12-28T23:30:51.220151",
     "exception": false,
     "start_time": "2024-12-28T23:30:51.214804",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Multivariate Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a27842e4",
   "metadata": {
    "papermill": {
     "duration": 0.005661,
     "end_time": "2024-12-28T23:30:51.231532",
     "exception": false,
     "start_time": "2024-12-28T23:30:51.225871",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5. Logistic Regression With Multiple Labels"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5195702,
     "sourceId": 8677630,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6380697,
     "sourceId": 10307667,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.075247,
   "end_time": "2024-12-28T23:30:51.960460",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-28T23:30:45.885213",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
