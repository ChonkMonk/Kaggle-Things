{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2e456512",
   "metadata": {
    "papermill": {
     "duration": 0.007667,
     "end_time": "2024-12-31T15:03:45.664893",
     "exception": false,
     "start_time": "2024-12-31T15:03:45.657226",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Logistic Regression\n",
    "  \n",
    "This notebook is meant to provide a beginner friendly clear explaination as to the intuition behind Logistic Regression, where it is used, and how to use it. While I will try to go through the math and theory behind the algorithm, the primary focus will be to understand the intuition of how logistic regression works and how to interpret results from it.\n",
    "This notebook will use the example of classifying student grades using this dataset: https://www.kaggle.com/datasets/rabieelkharoua/students-performance-dataset. The variable \"GradeClass\" represents the grade the student received with 4.0 mapping to F. This variable is altered in the altered-student-performance dataset in the pass variable to be 1 if the student passes (GradeClass < 4.0) and 0 otherwise.\n",
    "\n",
    "I will also be actively updating the notebook if there are any mistakes or potential improvements.\n",
    "\n",
    "### Background Knowledge Assumptions\n",
    "This notebook assumes you are already familiar with what classification and linear regression are as well as some basic knowledge of statistics and probability.\n",
    "\n",
    "### Contents\n",
    "1. [\"When to Use\"](#chapter1)\n",
    "2. [\"The Algorithm Broken Down\"](#chapter2)\n",
    "3. [\"Implementation\"](#chapter3)\n",
    "4. [\"Extensions\"](#chapter4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2919da42",
   "metadata": {
    "papermill": {
     "duration": 0.006494,
     "end_time": "2024-12-31T15:03:45.678471",
     "exception": false,
     "start_time": "2024-12-31T15:03:45.671977",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. When to Use <a class = \"anchor\" id = \"chapter1\"></a>\n",
    "|Advantages | Disadvantages |\n",
    "| --- | --- |\n",
    "| Simple to Implement | Might lack performance compared to more complicated Models |\n",
    "| High Interpretability | Assumes Linearity between Features and Log Odds (logits) |\n",
    "| Good Baseline for other Models | Assumes Features Independent of Each Other |\n",
    "\n",
    "In the simplist case, Logistic Regression takes in various features as inputs and returns the probability of one of two categories given the features. This makes Logistic Regression a simple and intuitive approach to classification tasks.\n",
    "\n",
    "Logistic regression is a very good algorithm as a baseline for others. It's main assumption is that the features are related to the output label by the sigmoid function (aka logits of labels linearly related to features). Because of the low amount of assumptions, it can generalize well to data. But other algorithms with stronger assumptions are likely to outperform if those assumptions are satisfied since the assumptions \"tell\" the model more about the nature of the data.\n",
    "  \n",
    "Consider the Example:\n",
    "Let's say we want to figure out whether a student is likely to pass highschool based on the time they spent studying. Intuitively we would want to find their probability of passing given their time spent studying. Thus, for every observation we are trying to find the following:\n",
    "$$P(Pass | Studytime)$$\n",
    "More generally this would be:\n",
    "$$P(Y | X)$$\n",
    "Where Y is the class or label for the outcome and X is the observed feature value."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9021679a",
   "metadata": {
    "papermill": {
     "duration": 0.006507,
     "end_time": "2024-12-31T15:03:45.691700",
     "exception": false,
     "start_time": "2024-12-31T15:03:45.685193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. The Algorithm Broken Down <a class = \"anchor\" id = \"chapter2\"></a>\n",
    "### Key Points\n",
    "|Assumptions|\n",
    "|---|\n",
    "|1. Features Independent of One Another|\n",
    "|2. Sigmoid can represent relationship between independent and dependent variables|\n",
    "|3. No significant outliers|\n",
    "|4. Samples independent and identically distributed|\n",
    "\n",
    "Prediction (Sigmoid aka Logistic Function):\n",
    "$$\\hat{y}_{i,k}(z) = \\frac{1}{1 + e^{-z}}$$\n",
    "Where z is the logits.\n",
    "\n",
    "Log odds (Logits):\n",
    "$$log(\\frac{P(Y)}{1 - P(Y)}) = b + w * X$$\n",
    "  \n",
    "Loss Function (Cross Entopy Loss):\n",
    "$$L(w, b) = \\prod_{i=1}^{m}(p(x_i)^{y_i} * (1 - p(x_i))^{1 - y_i})$$\n",
    "$$l(w, b) = \\sum_{i=1}^{m}(y_i * log(p(x_i)) + (1 - y_i) * log(1 - p(x_i)))$$\n",
    "The first function being without the log transformation and the second one being maximum likelihood with the log transformation.\n",
    "\n",
    "Cost Function\n",
    "$$J(w, b) = \\frac{1}{m}\\sum_{i=1}^{m}(y_i * ln(p(x_i)) + (1 - y_i) * ln(1 - p(x_i)))$$\n",
    "\n",
    "### Predictions\n",
    "Logistic Regression seeks to answer the question of which possible case is most likely given the provided data. Following our example of students passing highschool based on their study time, a logistic regression model will be answering is it more likely for the student to pass or for the student to fail given their study time. This is done by finding the probability of a given output label (in this case pass or not pass) given by:\n",
    "$$P(Pass) = \\frac{1}{1 + e^{-(b + w * Studytime)}}$$\n",
    "In a more general form this will be:\n",
    "$$P(Y) = \\frac{1}{1 + e^{-(b + w * X)}}$$\n",
    "Where Y is a binary variable (either y=1 or y=0) and X is some independent variable.\n",
    "\n",
    "### Loss and Cost Function\n",
    "Notice how in calculating the probabilities, the formula $b + w * X$ is used. This is the same formula used in linear regression, however in this case, there is not a linear relationship between the output of the model and the inputs to the model. But rather according to the assumptions of logistic regression, there exists a linear relationship between the feature (x) and the logits given by:\n",
    "\n",
    "$$log(\\frac{P(y)}{1 - P(y)}) = b + w * x$$\n",
    "With the same assumptions for X and Y as with the sigmoid.\n",
    "\n",
    "Continuing with the example of student performance the log odds will be:\n",
    "$$log(\\frac{P(Pass)}{1 - P(Pass)}) = b + w * Studytime$$\n",
    "for the predicted log odds of passing.\n",
    "\n",
    "In Logistic Regression, log odds are use in *optimizing* the model rather than absolute probabilities as it provides a simple and interpretable relationship between the relationship between the independent variables and the dependent variables. Mean squared error is also not used in optimization as it creates a non convex function that may result in the model converging to a local minimum instead of the global minimum in the optimization step. In this case, optimization means finding the values for $b$ and $w$ that most accurately reflects the nature of the observations. The actual interpretation of the relationship between the log odds and the coefficients can be as follows: a one unit increase in X on average is related to a $w$ % increase in the odds of Y when the change is small (ie. ln(5.2) - ln(5) = 0.03922 $\\approx$ (5.2 - 5) / 5). When the change is larger, this interpretation falls apart as the difference in ln values is no longer as close to the actual changes, instead $e^{w}$ becomes the actual % change of the odds.\n",
    "\n",
    "Building off of the log odds, the method of maximum likelihood is used to estimate the actual coefficients for $\\beta_0$ and $\\beta_1$. Intuitively, the method of maximum likelihoods fits parameters $\\beta_1$ and $\\beta_0$ such that the observed observations are most likely. Essentially in mathematical terms this means that we are maximizing the functions:\n",
    "$$\\prod_{i=1}^{m}p(x_i)$$\n",
    "$$\\prod_{i=1}^{m}(1 - p(x_i))$$\n",
    "For labels that are positive (1) and labels that are negative (0) respectively. Combining both into a single function we get:\n",
    "$$\n",
    "\\begin{align*}\n",
    "L(w, b) &= \\prod_{i=1}^{m}p(x_i) * \\prod_{i=1}^{n}(1 - p(x_i)) \\\\\n",
    "                    &= \\prod_{i=1}^{m}(p(x_i)^{y_i} * (1 - p(x_i))^{1 - y_i})\n",
    "\\end{align*}    \n",
    "$$\n",
    "Applying a log transformation we get the log likelihood function:\n",
    "$$l(w, b) = \\sum_{i=1}^{m}(y_i * log(g(b + w * x_i)) + (1 - y_i) * log(1 - g(b + w * x_i)))$$\n",
    "We also get our loss function (cross entropy loss) from this formula with the loss for each observation being:\n",
    "$$loss(g(b + w * x_i), y_i)(y_i * log(g(b + w * x_i)) + (1 - y_i) * log(1 - g(b + w * x_i)))$$\n",
    "Notice the convexity in this loss function. This ensure that the model is optimizing to a global minimum rather than a local minimum.\n",
    "  \n",
    "Where $m$ is the number of observations in our data, $x_i$ is the feature(s) and $y_i$ is the label of the observation i, $y_i$ is 1 when the label is positive and 0 otherwise. g(b + w * x_i) is the probability of y being 1 given by the sigmoid function.\n",
    "\n",
    "Although log likelihood provides the foundation for the cost function to be optimized, negative log likelihood is often used instead:\n",
    "$$J(w, b) = -\\frac{1}{m}\\sum_{i=1}^{m}(y_i * log(g(b + w * x_i)) + (1 - y_i) * log(1 - g(b + w * x_i)))$$\n",
    "\n",
    "### Optimization\n",
    "Now that we have the cost function that is to be minimized we use the gradient descent algorithm to solve for the parameters $w$ and $b$. The intuition behind gradient descent essentially just says, which direction will we descend in to decrease loss the most. In math terms, this is finding the gradient of function with respect to a given parameter and updating the parameter by the negative gradient multiplied by a learning rate $\\alpha$, hence the name gradient descent. These parameters are updated until the cost function converges to a global minimum.\n",
    "$$\\begin{align*} \n",
    "b = b - \\alpha * \\frac{\\delta J(w,b)}{\\delta b} \\\\\n",
    "w = w - \\alpha * \\frac{\\delta J(w,b)}{\\delta w}\n",
    " \\end{align*}$$\n",
    "For the case where there is only one feature the gradients are:\n",
    "$$\\begin{align*} \n",
    "\\frac{\\delta J(w,b)}{\\delta b} = -\\frac{1}{m}\\sum_{i=0}^{m-1}(g(b + w * x_i) - y_i) \\\\\n",
    "\\frac{\\delta J(w,b)}{\\delta w} = -\\frac{1}{m}\\sum_{i=0}^{m-1}((g(b + w * x_i) - y_i)x_i)\n",
    "\\end{align*}$$\n",
    "\n",
    "Note: Log likelihood can also be used as cost function in optimization but it just requires gradient ascent rather than gradient descent."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "311a87f7",
   "metadata": {
    "papermill": {
     "duration": 0.006538,
     "end_time": "2024-12-31T15:03:45.705499",
     "exception": false,
     "start_time": "2024-12-31T15:03:45.698961",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Implementation <a class = \"anchor\" id = \"chapter3\"></a>  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae6dae20",
   "metadata": {
    "papermill": {
     "duration": 0.006406,
     "end_time": "2024-12-31T15:03:45.718691",
     "exception": false,
     "start_time": "2024-12-31T15:03:45.712285",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.1 Implementation in Numpy (for Understanding Only)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "330d148c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:03:45.733682Z",
     "iopub.status.busy": "2024-12-31T15:03:45.733245Z",
     "iopub.status.idle": "2024-12-31T15:03:48.015325Z",
     "shell.execute_reply": "2024-12-31T15:03:48.014304Z"
    },
    "papermill": {
     "duration": 2.291896,
     "end_time": "2024-12-31T15:03:48.017394",
     "exception": false,
     "start_time": "2024-12-31T15:03:45.725498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# imports\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b3ba6ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:03:48.033182Z",
     "iopub.status.busy": "2024-12-31T15:03:48.032559Z",
     "iopub.status.idle": "2024-12-31T15:03:48.096540Z",
     "shell.execute_reply": "2024-12-31T15:03:48.095428Z"
    },
    "papermill": {
     "duration": 0.073649,
     "end_time": "2024-12-31T15:03:48.098286",
     "exception": false,
     "start_time": "2024-12-31T15:03:48.024637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>StudentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "      <th>GPA</th>\n",
       "      <th>GradeClass</th>\n",
       "      <th>Pass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1001</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>19.833723</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.929196</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1002</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>15.408756</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.042915</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1003</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4.210570</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.112602</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1004</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>10.028829</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.054218</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1005</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4.672495</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.288061</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  StudentID  Age  Gender  Ethnicity  ParentalEducation  \\\n",
       "0           0       1001   17       1          0                  2   \n",
       "1           1       1002   18       0          0                  1   \n",
       "2           2       1003   15       0          2                  3   \n",
       "3           3       1004   17       1          0                  3   \n",
       "4           4       1005   17       1          0                  2   \n",
       "\n",
       "   StudyTimeWeekly  Absences  Tutoring  ParentalSupport  Extracurricular  \\\n",
       "0        19.833723         7         1                2                0   \n",
       "1        15.408756         0         0                1                0   \n",
       "2         4.210570        26         0                2                0   \n",
       "3        10.028829        14         0                3                1   \n",
       "4         4.672495        17         1                3                0   \n",
       "\n",
       "   Sports  Music  Volunteering       GPA  GradeClass  Pass  \n",
       "0       0      1             0  2.929196         2.0     1  \n",
       "1       0      0             0  3.042915         1.0     1  \n",
       "2       0      0             0  0.112602         4.0     0  \n",
       "3       0      0             0  2.054218         3.0     1  \n",
       "4       0      0             0  1.288061         4.0     0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/altered-student-performance/Altered_Student_Performance_data.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b6b44813",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:03:48.113692Z",
     "iopub.status.busy": "2024-12-31T15:03:48.113275Z",
     "iopub.status.idle": "2024-12-31T15:03:48.126735Z",
     "shell.execute_reply": "2024-12-31T15:03:48.125648Z"
    },
    "papermill": {
     "duration": 0.023131,
     "end_time": "2024-12-31T15:03:48.128591",
     "exception": false,
     "start_time": "2024-12-31T15:03:48.105460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# splitting data\n",
    "X_train, X_test, y_train, y_test = train_test_split(df[\"StudyTimeWeekly\"].to_numpy(), df[\"Pass\"].to_numpy(), test_size=0.3, random_state=37)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2323bab9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:03:48.144254Z",
     "iopub.status.busy": "2024-12-31T15:03:48.143882Z",
     "iopub.status.idle": "2024-12-31T15:03:48.153023Z",
     "shell.execute_reply": "2024-12-31T15:03:48.152112Z"
    },
    "papermill": {
     "duration": 0.018834,
     "end_time": "2024-12-31T15:03:48.154616",
     "exception": false,
     "start_time": "2024-12-31T15:03:48.135782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def sigmoid(z):\n",
    "    return 1 / (1 + np.exp(-np.clip(z, -500, 500)))\n",
    "\n",
    "def compute_cost(X, y, w, b):\n",
    "    m = X.shape[0]\n",
    "    loss_sum = 0\n",
    "\n",
    "    for i in range(m):\n",
    "        logits = w * X[i] + b\n",
    "        g = sigmoid(logits)\n",
    "        loss = -y[i] * np.log(g) - (1 - y[i]) * np.log(1 - g)\n",
    "        loss_sum += loss\n",
    "\n",
    "    cost = (1 / m) * loss_sum\n",
    "    return cost\n",
    "\n",
    "def compute_gradient(X, y, w, b):\n",
    "    m = X.shape[0]\n",
    "    dj_dw = 0.0\n",
    "    dj_db = 0.0\n",
    "    for i in range(m):\n",
    "        logits = w * X[i] + b\n",
    "        g = sigmoid(logits)\n",
    "\n",
    "        dj_dw += (g - y[i]) * X[i]\n",
    "        dj_db += g - y[i]\n",
    "\n",
    "    # no \"-\" sign since subtracting negative gradient\n",
    "    dj_dw *= 1/m\n",
    "    dj_db *= 1/m\n",
    "    return dj_dw, dj_db\n",
    "\n",
    "def gradient_descent(X, y, w, b, alpha, num_iters):\n",
    "    m = X.shape[0]\n",
    "\n",
    "    for i in range(num_iters):\n",
    "        dj_dw, dj_db = compute_gradient(X, y, w, b)\n",
    "\n",
    "        w -= alpha * dj_dw\n",
    "        b -= alpha * dj_db\n",
    "\n",
    "        cost = compute_cost(X, y, w, b)\n",
    "\n",
    "        if i % 100 == 0:\n",
    "            print(f\"Iteration: {i}: Cost:{cost}\")\n",
    "            print(w, b)\n",
    "    return w, b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dfaf922c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:03:48.170207Z",
     "iopub.status.busy": "2024-12-31T15:03:48.169859Z",
     "iopub.status.idle": "2024-12-31T15:04:16.510565Z",
     "shell.execute_reply": "2024-12-31T15:04:16.509220Z"
    },
    "papermill": {
     "duration": 28.351178,
     "end_time": "2024-12-31T15:04:16.512906",
     "exception": false,
     "start_time": "2024-12-31T15:03:48.161728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration: 0: Cost:0.692154812564101\n",
      "0.003426538172832429 -1.7921146953405018e-05\n",
      "Iteration: 100: Cost:0.690515340330567\n",
      "0.013090568477066081 -0.026765516104986467\n",
      "Iteration: 200: Cost:0.6898535969582559\n",
      "0.015083822859222364 -0.05241229820186285\n",
      "Iteration: 300: Cost:0.6892709776597822\n",
      "0.016954474301494462 -0.07647697510331279\n",
      "Iteration: 400: Cost:0.6887580013437832\n",
      "0.01871006722581767 -0.09905759380038416\n",
      "Iteration: 500: Cost:0.6883063183201531\n",
      "0.02035769759080055 -0.1202462635778556\n",
      "Iteration: 600: Cost:0.6879085779515577\n",
      "0.021904034803977502 -0.14012946525291142\n",
      "Iteration: 700: Cost:0.6875583108959125\n",
      "0.023355343689835797 -0.15878835676901748\n",
      "Iteration: 800: Cost:0.6872498245907304\n",
      "0.02471750621512666 -0.17629907198240788\n",
      "Iteration: 900: Cost:0.6869781106805144\n",
      "0.025996042747249457 -0.19273301033586232\n"
     ]
    }
   ],
   "source": [
    "# training\n",
    "initial_w = 0\n",
    "initial_b = 0\n",
    "\n",
    "iterations = 1000\n",
    "alpha = 0.01\n",
    "\n",
    "w, b = gradient_descent(X_train, y_train, initial_w, initial_b, alpha, iterations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ecb44414",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.530884Z",
     "iopub.status.busy": "2024-12-31T15:04:16.530466Z",
     "iopub.status.idle": "2024-12-31T15:04:16.536384Z",
     "shell.execute_reply": "2024-12-31T15:04:16.535234Z"
    },
    "papermill": {
     "duration": 0.016502,
     "end_time": "2024-12-31T15:04:16.538054",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.521552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict(X, w, b):\n",
    "    m = X.shape[0]\n",
    "    predictions = np.zeros(m)\n",
    "    \n",
    "    for i in range(m):\n",
    "        logits = w * X[i] + b\n",
    "        g = sigmoid(logits)\n",
    "        predictions[i] = round(g)\n",
    "    return predictions\n",
    "\n",
    "def calc_accuracy(predictions, actual):\n",
    "    return np.mean(predictions == actual)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d6f875cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.554900Z",
     "iopub.status.busy": "2024-12-31T15:04:16.554515Z",
     "iopub.status.idle": "2024-12-31T15:04:16.566860Z",
     "shell.execute_reply": "2024-12-31T15:04:16.565625Z"
    },
    "papermill": {
     "duration": 0.022911,
     "end_time": "2024-12-31T15:04:16.568725",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.545814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5236768802228412\n"
     ]
    }
   ],
   "source": [
    "predictions = predict(X_test, w, b)\n",
    "accuracy = calc_accuracy(predictions, y_test)\n",
    "print(f\"Accuracy: {accuracy}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d331991",
   "metadata": {
    "papermill": {
     "duration": 0.007353,
     "end_time": "2024-12-31T15:04:16.584314",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.576961",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Ok the accuracy absolutely sucks but thats also partly because the label relies on a lot more than just the feature of \"StudyTimeWeekly\" which is what we used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6a0d7b4",
   "metadata": {
    "papermill": {
     "duration": 0.007662,
     "end_time": "2024-12-31T15:04:16.600070",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.592408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.2 Implementation in Scikitlearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6a3b250c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.618584Z",
     "iopub.status.busy": "2024-12-31T15:04:16.618170Z",
     "iopub.status.idle": "2024-12-31T15:04:16.730488Z",
     "shell.execute_reply": "2024-12-31T15:04:16.729454Z"
    },
    "papermill": {
     "duration": 0.124113,
     "end_time": "2024-12-31T15:04:16.732412",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.608299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# imports\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "645376e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.749460Z",
     "iopub.status.busy": "2024-12-31T15:04:16.749070Z",
     "iopub.status.idle": "2024-12-31T15:04:16.773631Z",
     "shell.execute_reply": "2024-12-31T15:04:16.772565Z"
    },
    "papermill": {
     "duration": 0.0351,
     "end_time": "2024-12-31T15:04:16.775563",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.740463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>StudentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "      <th>GPA</th>\n",
       "      <th>GradeClass</th>\n",
       "      <th>Pass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1001</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>19.833723</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.929196</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1002</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>15.408756</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.042915</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1003</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4.210570</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.112602</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1004</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>10.028829</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.054218</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1005</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4.672495</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.288061</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  StudentID  Age  Gender  Ethnicity  ParentalEducation  \\\n",
       "0           0       1001   17       1          0                  2   \n",
       "1           1       1002   18       0          0                  1   \n",
       "2           2       1003   15       0          2                  3   \n",
       "3           3       1004   17       1          0                  3   \n",
       "4           4       1005   17       1          0                  2   \n",
       "\n",
       "   StudyTimeWeekly  Absences  Tutoring  ParentalSupport  Extracurricular  \\\n",
       "0        19.833723         7         1                2                0   \n",
       "1        15.408756         0         0                1                0   \n",
       "2         4.210570        26         0                2                0   \n",
       "3        10.028829        14         0                3                1   \n",
       "4         4.672495        17         1                3                0   \n",
       "\n",
       "   Sports  Music  Volunteering       GPA  GradeClass  Pass  \n",
       "0       0      1             0  2.929196         2.0     1  \n",
       "1       0      0             0  3.042915         1.0     1  \n",
       "2       0      0             0  0.112602         4.0     0  \n",
       "3       0      0             0  2.054218         3.0     1  \n",
       "4       0      0             0  1.288061         4.0     0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading data\n",
    "df = pd.read_csv(\"/kaggle/input/altered-student-performance/Altered_Student_Performance_data.csv\")\n",
    "df.head() # only going to care about the columns \"StudyTimeWeekly\" and \"Pass\" for now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fb1f9df2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.793450Z",
     "iopub.status.busy": "2024-12-31T15:04:16.793045Z",
     "iopub.status.idle": "2024-12-31T15:04:16.808770Z",
     "shell.execute_reply": "2024-12-31T15:04:16.807768Z"
    },
    "papermill": {
     "duration": 0.026966,
     "end_time": "2024-12-31T15:04:16.810742",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.783776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# splitting data\n",
    "X_train, X_test, y_train, y_test = train_test_split(df[[\"StudyTimeWeekly\"]], df[\"Pass\"].to_numpy(), test_size=0.3, random_state=37)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ac293222",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.828215Z",
     "iopub.status.busy": "2024-12-31T15:04:16.827837Z",
     "iopub.status.idle": "2024-12-31T15:04:16.857565Z",
     "shell.execute_reply": "2024-12-31T15:04:16.856248Z"
    },
    "papermill": {
     "duration": 0.040594,
     "end_time": "2024-12-31T15:04:16.859654",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.819060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating and training model\n",
    "model = LogisticRegression()\n",
    "\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d10fdd0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.878187Z",
     "iopub.status.busy": "2024-12-31T15:04:16.877847Z",
     "iopub.status.idle": "2024-12-31T15:04:16.885913Z",
     "shell.execute_reply": "2024-12-31T15:04:16.884593Z"
    },
    "papermill": {
     "duration": 0.019479,
     "end_time": "2024-12-31T15:04:16.887663",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.868184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5376044568245125\n"
     ]
    }
   ],
   "source": [
    "# predicting\n",
    "accuracy = model.score(X_test, y_test)\n",
    "print(accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "89ea1789",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.906240Z",
     "iopub.status.busy": "2024-12-31T15:04:16.905885Z",
     "iopub.status.idle": "2024-12-31T15:04:16.918451Z",
     "shell.execute_reply": "2024-12-31T15:04:16.917213Z"
    },
    "papermill": {
     "duration": 0.023755,
     "end_time": "2024-12-31T15:04:16.920218",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.896463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StudyHours</th>\n",
       "      <th>Predictions</th>\n",
       "      <th>Actual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1366</th>\n",
       "      <td>16.085223</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>5.125848</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2085</th>\n",
       "      <td>10.138602</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1826</th>\n",
       "      <td>14.498205</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1779</th>\n",
       "      <td>6.453674</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      StudyHours  Predictions  Actual\n",
       "1366   16.085223            1       1\n",
       "84      5.125848            0       1\n",
       "2085   10.138602            1       0\n",
       "1826   14.498205            1       0\n",
       "1779    6.453674            0       0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# looking at predictions\n",
    "predictions = model.predict(X_test)\n",
    "predictions = pd.DataFrame({\"StudyHours\": X_test[\"StudyTimeWeekly\"], \"Predictions\":predictions, \"Actual\": y_test})\n",
    "predictions.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c20d9f92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.938995Z",
     "iopub.status.busy": "2024-12-31T15:04:16.938624Z",
     "iopub.status.idle": "2024-12-31T15:04:16.942876Z",
     "shell.execute_reply": "2024-12-31T15:04:16.941939Z"
    },
    "papermill": {
     "duration": 0.015801,
     "end_time": "2024-12-31T15:04:16.944922",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.929121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# imports for visualization\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "babf62e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.963568Z",
     "iopub.status.busy": "2024-12-31T15:04:16.963147Z",
     "iopub.status.idle": "2024-12-31T15:04:16.969105Z",
     "shell.execute_reply": "2024-12-31T15:04:16.967791Z"
    },
    "papermill": {
     "duration": 0.017464,
     "end_time": "2024-12-31T15:04:16.971084",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.953620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Beta1 Coefficient: 0.04570837512652257\n",
      "intercept: -0.4459422574581454\n"
     ]
    }
   ],
   "source": [
    "print(f\"Beta1 Coefficient: {model.coef_[0][0]}\")\n",
    "print(f\"intercept: {model.intercept_[0]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5b38cc88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:16.989798Z",
     "iopub.status.busy": "2024-12-31T15:04:16.989330Z",
     "iopub.status.idle": "2024-12-31T15:04:17.345619Z",
     "shell.execute_reply": "2024-12-31T15:04:17.344467Z"
    },
    "papermill": {
     "duration": 0.367674,
     "end_time": "2024-12-31T15:04:17.347612",
     "exception": false,
     "start_time": "2024-12-31T15:04:16.979938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualizing decision boundary\n",
    "beta = model.coef_[0]\n",
    "intercept = model.intercept_[0]\n",
    "\n",
    "x_vals = np.linspace(-100, 100, 1000)\n",
    "# it should be noted that the parameter w is so small such that the range must be much larger\n",
    "# than the dataset to see the full sigmoid function\n",
    "probabilities =  np.exp(intercept + beta * x_vals) / (1 + np.exp(intercept + beta * x_vals))\n",
    "\n",
    "plt.plot(x_vals, probabilities, color=\"black\", label=\"Decision Boundary\", zorder=2)\n",
    "plt.grid(zorder=1)\n",
    "plt.xlabel(\"Study Time\")\n",
    "plt.ylabel(\"Estimated Probability of Passing\")\n",
    "plt.title(\"Line of best fit for Logistic Regression\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "96c6b2a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.368062Z",
     "iopub.status.busy": "2024-12-31T15:04:17.367610Z",
     "iopub.status.idle": "2024-12-31T15:04:17.590766Z",
     "shell.execute_reply": "2024-12-31T15:04:17.589454Z"
    },
    "papermill": {
     "duration": 0.235387,
     "end_time": "2024-12-31T15:04:17.592628",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.357241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualizing decision boundary for sample\n",
    "beta = model.coef_[0]\n",
    "intercept = model.intercept_[0]\n",
    "\n",
    "x_vals = np.linspace(X_train.min(), X_train.max(), 1000)\n",
    "# it should be noted that the parameter w is so small such that the range must be much larger\n",
    "# than the dataset to see the full sigmoid function\n",
    "probabilities =  np.exp(intercept + beta * x_vals) / (1 + np.exp(intercept + beta * x_vals))\n",
    "\n",
    "plt.plot(x_vals, probabilities, color=\"black\", label=\"Decision Boundary\", zorder=2)\n",
    "plt.grid(zorder=1)\n",
    "plt.xlabel(\"Study Time\")\n",
    "plt.ylabel(\"Estimated Probability of Passing\")\n",
    "plt.title(\"Line of best fit in Sample Range\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71aa7019",
   "metadata": {
    "papermill": {
     "duration": 0.01116,
     "end_time": "2024-12-31T15:04:17.614310",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.603150",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.3 Interpreting Results\n",
    "From our simple model of logistic regression using just the amount of time students spend studying on whether or not they pass high school, we find regression coefficients of -0.4459 for the intercept ($\\beta_0$) and 0.0457 for the coefficient on studytimeweekly ($\\beta_1$). There isn't an interpretation for the intercept. The $\\beta_1$ coefficient is interpreted as: on average a 1 hour increase in weekly study time increases the student's odds of passing high school by $e^{0.0457} - 1$%. However, it should also be noted that the model is not very accurate, having only achieved an accuracy of 53.76%, only slightly better than random guessing."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89e74d1e",
   "metadata": {
    "papermill": {
     "duration": 0.009963,
     "end_time": "2024-12-31T15:04:17.634919",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.624956",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Extentions <a class = \"anchor\" id = \"chapter4\"></a>  \n",
    "\n",
    "### Multiple Logistic Regression\n",
    "So far we have only looked at the case of one variable and one label in logistic regression. However, often times it is a lot more benefitial to have more features to draw a prediction from. This will require the use of multiple logistic regression. Multiple Logistic Regression is a very simple extension of the base univariate Logistic Regression case where we are adding more variables and thus more parameters $w_i$ to the model. Our log odds then becomes:\n",
    "$$log(\\frac{p(Y)}{1-p(Y))}) = b + w_1 * X_1 + w_2 * X_2 + w_3 * X_3 + ... + w_n * X_n$$\n",
    "Where Y is the dependent variable and X are the features.\n",
    "\n",
    "In multiple logistic regression, the coefficients for the features may often be represented as a vector $\\vec{w}$ with shape (n, 1) where n is the number of features in the model. All other functions remain the same except with $w$ and $x_i$ being replaced with vectors $\\vec{w}$ and $\\vec{x}_i$. With the new features, the optimization step new calculates the gradient for each coefficient $w_i$.\n",
    "\n",
    "### Multinomial Logistic Regression\n",
    "There are also cases where our target label is more than just 2 features. In these cases, multinomial logistic regression must be used. This extension of logistic regression uses the softmax function instead of the sigmoid function. Softmax has the same intuition as sigmoid except it returns a vector with the probabilities of each class rather than of just one class as with the sigmoid. The softmax function is given by:\n",
    "$$\\hat{y}_{i, k} = \\frac{e^{z}}{\\sum_{j=1}^{K}e^{z}}$$\n",
    "where $\\hat{y}_{i, k}$ is the predicted probability of for the ith observation being of class k, z is the logits (in the form $b + w_1 * x_1 + w_2 * x_2 ...$) and with K classes. \n",
    "\n",
    "With the change in output function from sigmoid to softmax, the cost function is also changed. Instead of cross-entropy loss, categorical cross-entropy loss is used to hand the increase in potential classes. Categorical Cross-Entropy loss is given by:\n",
    "$$J(\\vec{w}, b) = -\\frac{1}{m}\\sum_{i=1}^{m}\\sum_{k=1}^{K}(y_{i,k} log(\\hat{y}_{i,k}))$$\n",
    "  \n",
    "Where $y_{i,k} = 1$ if the ith observation is of the kth class and 0 otherwise. $\\hat{y}_{i, k}$ is the predicted probability of the correct class."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fbf3e69",
   "metadata": {
    "papermill": {
     "duration": 0.010055,
     "end_time": "2024-12-31T15:04:17.655261",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.645206",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Implementation in Scikitlearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "68817d69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.677425Z",
     "iopub.status.busy": "2024-12-31T15:04:17.676992Z",
     "iopub.status.idle": "2024-12-31T15:04:17.681540Z",
     "shell.execute_reply": "2024-12-31T15:04:17.680456Z"
    },
    "papermill": {
     "duration": 0.017753,
     "end_time": "2024-12-31T15:04:17.683331",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.665578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ccaa710a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.705939Z",
     "iopub.status.busy": "2024-12-31T15:04:17.705514Z",
     "iopub.status.idle": "2024-12-31T15:04:17.739864Z",
     "shell.execute_reply": "2024-12-31T15:04:17.738922Z"
    },
    "papermill": {
     "duration": 0.047745,
     "end_time": "2024-12-31T15:04:17.741812",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.694067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StudentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "      <th>GPA</th>\n",
       "      <th>GradeClass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1001</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>19.833723</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.929196</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1002</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>15.408756</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.042915</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1003</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4.210570</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.112602</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1004</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>10.028829</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.054218</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4.672495</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.288061</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   StudentID  Age  Gender  Ethnicity  ParentalEducation  StudyTimeWeekly  \\\n",
       "0       1001   17       1          0                  2        19.833723   \n",
       "1       1002   18       0          0                  1        15.408756   \n",
       "2       1003   15       0          2                  3         4.210570   \n",
       "3       1004   17       1          0                  3        10.028829   \n",
       "4       1005   17       1          0                  2         4.672495   \n",
       "\n",
       "   Absences  Tutoring  ParentalSupport  Extracurricular  Sports  Music  \\\n",
       "0         7         1                2                0       0      1   \n",
       "1         0         0                1                0       0      0   \n",
       "2        26         0                2                0       0      0   \n",
       "3        14         0                3                1       0      0   \n",
       "4        17         1                3                0       0      0   \n",
       "\n",
       "   Volunteering       GPA  GradeClass  \n",
       "0             0  2.929196         2.0  \n",
       "1             0  3.042915         1.0  \n",
       "2             0  0.112602         4.0  \n",
       "3             0  2.054218         3.0  \n",
       "4             0  1.288061         4.0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading data\n",
    "df = pd.read_csv(\"/kaggle/input/students-performance-dataset/Student_performance_data _.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "32e9a689",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.764631Z",
     "iopub.status.busy": "2024-12-31T15:04:17.764228Z",
     "iopub.status.idle": "2024-12-31T15:04:17.774257Z",
     "shell.execute_reply": "2024-12-31T15:04:17.773168Z"
    },
    "papermill": {
     "duration": 0.023526,
     "end_time": "2024-12-31T15:04:17.776154",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.752628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# using all features except GPA to predict GradeClass\n",
    "# SOMETHING ABOUT WHAT GRADECLASS MEANS\n",
    "X = df.drop(columns=[\"GradeClass\", \"GPA\", \"StudentID\"])\n",
    "y = df[\"GradeClass\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=37)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "208a9e40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.798861Z",
     "iopub.status.busy": "2024-12-31T15:04:17.798475Z",
     "iopub.status.idle": "2024-12-31T15:04:17.811149Z",
     "shell.execute_reply": "2024-12-31T15:04:17.810045Z"
    },
    "papermill": {
     "duration": 0.026298,
     "end_time": "2024-12-31T15:04:17.813121",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.786823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>226</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>11.448155</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1176</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>17.048778</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1554</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.521786</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10.230724</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>805</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.220134</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Age  Gender  Ethnicity  ParentalEducation  StudyTimeWeekly  Absences  \\\n",
       "226    15       0          2                  1        11.448155        19   \n",
       "1176   17       1          2                  2        17.048778         0   \n",
       "1554   18       0          1                  2         3.521786        22   \n",
       "1657   17       1          0                  0        10.230724         5   \n",
       "805    18       0          2                  2         4.220134         5   \n",
       "\n",
       "      Tutoring  ParentalSupport  Extracurricular  Sports  Music  Volunteering  \n",
       "226          0                2                0       0      0             0  \n",
       "1176         1                2                0       0      0             0  \n",
       "1554         0                4                0       0      0             0  \n",
       "1657         0                4                0       0      1             0  \n",
       "805          0                0                0       0      0             0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "12a1aaf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.836046Z",
     "iopub.status.busy": "2024-12-31T15:04:17.835697Z",
     "iopub.status.idle": "2024-12-31T15:04:17.905299Z",
     "shell.execute_reply": "2024-12-31T15:04:17.903975Z"
    },
    "papermill": {
     "duration": 0.083339,
     "end_time": "2024-12-31T15:04:17.907303",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.823964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# making the model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6acc8ffd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.931605Z",
     "iopub.status.busy": "2024-12-31T15:04:17.931164Z",
     "iopub.status.idle": "2024-12-31T15:04:17.940788Z",
     "shell.execute_reply": "2024-12-31T15:04:17.939456Z"
    },
    "papermill": {
     "duration": 0.023859,
     "end_time": "2024-12-31T15:04:17.942649",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.918790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Multiple and Multinomial Logistic Regression Accuracy:0.7298050139275766\n"
     ]
    }
   ],
   "source": [
    "accuracy = model.score(X_test, y_test)\n",
    "print(f\"Multiple and Multinomial Logistic Regression Accuracy:{accuracy}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "dfdadf7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:17.967000Z",
     "iopub.status.busy": "2024-12-31T15:04:17.966628Z",
     "iopub.status.idle": "2024-12-31T15:04:17.986410Z",
     "shell.execute_reply": "2024-12-31T15:04:17.985167Z"
    },
    "papermill": {
     "duration": 0.034167,
     "end_time": "2024-12-31T15:04:17.988272",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.954105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "      <th>Predicted Grade Class</th>\n",
       "      <th>Actual Grade Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1366</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>16.085223</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5.125848</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2085</th>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>10.138602</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1826</th>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>14.498205</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1779</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>6.453674</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3.415365</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1428</th>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>9.030940</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.598486</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1949</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>19.235250</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1776</th>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.106484</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Age  Gender  Ethnicity  ParentalEducation  StudyTimeWeekly  Absences  \\\n",
       "1366   17       0          0                  2        16.085223        13   \n",
       "84     17       1          0                  2         5.125848        12   \n",
       "2085   15       1          0                  4        10.138602        15   \n",
       "1826   16       1          1                  3        14.498205        27   \n",
       "1779   18       0          3                  2         6.453674        23   \n",
       "35     15       0          3                  1         3.415365        23   \n",
       "1428   16       0          0                  2         9.030940        16   \n",
       "11     17       0          0                  1         7.598486        15   \n",
       "1949   17       1          0                  1        19.235250         3   \n",
       "1776   16       0          0                  1         0.106484        14   \n",
       "\n",
       "      Tutoring  ParentalSupport  Extracurricular  Sports  Music  Volunteering  \\\n",
       "1366         0                3                1       0      1             0   \n",
       "84           0                3                1       1      0             0   \n",
       "2085         0                1                1       0      0             0   \n",
       "1826         1                0                0       0      0             0   \n",
       "1779         1                2                0       1      0             0   \n",
       "35           0                1                0       0      0             0   \n",
       "1428         0                3                0       0      1             0   \n",
       "11           0                2                0       0      0             1   \n",
       "1949         0                0                1       0      0             0   \n",
       "1776         0                4                0       0      0             0   \n",
       "\n",
       "      Predicted Grade Class  Actual Grade Class  \n",
       "1366                    2.0                 2.0  \n",
       "84                      3.0                 3.0  \n",
       "2085                    4.0                 4.0  \n",
       "1826                    4.0                 4.0  \n",
       "1779                    4.0                 4.0  \n",
       "35                      4.0                 4.0  \n",
       "1428                    4.0                 4.0  \n",
       "11                      4.0                 4.0  \n",
       "1949                    2.0                 2.0  \n",
       "1776                    4.0                 4.0  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = model.predict(X_test)\n",
    "prediction_df = X_test.copy()\n",
    "prediction_df.insert(len(prediction_df.columns), \"Predicted Grade Class\", predictions)\n",
    "prediction_df.insert(len(prediction_df.columns), \"Actual Grade Class\", y_test)\n",
    "prediction_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6683be82",
   "metadata": {
    "papermill": {
     "duration": 0.011093,
     "end_time": "2024-12-31T15:04:18.010890",
     "exception": false,
     "start_time": "2024-12-31T15:04:17.999797",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Wowie this model did significantly better than before!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5a875e74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T15:04:18.034742Z",
     "iopub.status.busy": "2024-12-31T15:04:18.034241Z",
     "iopub.status.idle": "2024-12-31T15:04:18.041006Z",
     "shell.execute_reply": "2024-12-31T15:04:18.039629Z"
    },
    "papermill": {
     "duration": 0.020641,
     "end_time": "2024-12-31T15:04:18.042755",
     "exception": false,
     "start_time": "2024-12-31T15:04:18.022114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.01648272e-01 -1.57932440e-02  1.57252207e-05  2.54101031e-02\n",
      "  9.43767086e-02 -2.56938805e-01  7.91969130e-01  5.77144191e-01\n",
      "  5.74316604e-01  4.13606628e-01  1.19140530e-01 -1.48079799e-02]\n",
      "[-0.08686632  0.02509125  0.02844002  0.05811971 -0.02478467]\n"
     ]
    }
   ],
   "source": [
    "# model parameters\n",
    "print(model.coef_[0])\n",
    "print(model.intercept_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "114fde9c",
   "metadata": {
    "papermill": {
     "duration": 0.011023,
     "end_time": "2024-12-31T15:04:18.065568",
     "exception": false,
     "start_time": "2024-12-31T15:04:18.054545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Each value in the coef_ array corresponds to the $w$ of that given feature. Each value in intercept_ array is intercept term $b$ for a given class.\n",
    "\n",
    "It should also be taken into consideration that many of the variables are categorical but are encoded numerically potentially making the model interpret them as numerical data. This could potentially ruin interpretability of the model or lead to misleading information (since the model may interpret numerically encoded classes as ordinal). A solution to this would be to dummy encode all categorical varibles but thats feature engineering which is out of the scope of this notebook."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5195702,
     "sourceId": 8677630,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6380697,
     "sourceId": 10307667,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 36.024021,
   "end_time": "2024-12-31T15:04:18.800629",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-31T15:03:42.776608",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
